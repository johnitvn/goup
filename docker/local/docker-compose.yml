services:
  maildev:
    container_name: maildev
    image: maildev/maildev
    restart: unless-stopped
    environment:
      MAILDEV_SMTP_PORT: 5000
      MAILDEV_WEB_PORT: 6000
    ports:
      - 6000:6000/tcp
      - 5000:5000/tcp
    healthcheck:
      test: ['CMD', 'nc', '-vz', '-w1', '127.0.0.1', '6000']
      interval: 1s
      timeout: 3s
      retries: 5

  mongodb:
    container_name: mongodb
    image: mongo:4.4
    ports:
      - 5001:27017/tcp
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 1s
      timeout: 3s
      retries: 5

  mongo-express:
    container_name: mongo-express
    image: mongo-express
    ports:
      - 6001:8081/tcp
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://mongodb:27017
      ME_CONFIG_BASICAUTH: false
      ME_CONFIG_MONGODB_ENABLE_ADMIN: true
    healthcheck:
      test: wget --quiet --tries=3 --spider http://mongo-express:8081 || exit 1
      interval: 1s
      timeout: 3s
      retries: 5

  redis:
    container_name: redis
    image: redis:6.2-alpine
    ports:
      - 5002:6379/tcp
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli ping | grep PONG']
      interval: 1s
      timeout: 3s
      retries: 5

  redis-commander:
    container_name: redis-commander
    image: rediscommander/redis-commander:latest
    ports:
      - 6002:8081
    restart: unless-stopped
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'nc', '-vz', '-w1', '127.0.0.1', '8081']
      interval: 1s
      timeout: 3s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - 5003:5672
      - 6003:15672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 5s
      retries: 5

  s3:
    container_name: s3
    image: minio/minio
    command: server /data --address ":5004" --console-address ":6004"
    restart: unless-stopped
    ports:
      - 5004:5004/tcp
      - 6004:6004/tcp
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    healthcheck:
      test: 'curl -I http://localhost:5004/minio/health/live'
      interval: 5s
      timeout: 5s
      retries: 5

  s3-setup:
    image: minio/mc
    container_name: s3-setup
    restart: unless-stopped
    depends_on:
      s3:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add s3 http://s3:5004 minioadmin minioadmin;
      /usr/bin/mc mb --region vn-hn-1 -p s3/static;
      /usr/bin/mc anonymous set download s3/static;
      /usr/bin/mc mb --region vn-hn-1 -p s3/resources;
      tail -f /dev/null
      "

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    network_mode: host
