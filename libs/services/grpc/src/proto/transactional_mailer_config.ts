/**
 * This file is auto-generated by nestjs-proto-gen-ts
 */

import { Observable } from 'rxjs';
import { Metadata } from '@grpc/grpc-js';

export namespace transactional_mailer_config {
  // Định nghĩa các message
  export interface SmtpConfig {
    // Unique identifier for the SMTP config
    id?: string;
    // Name of the SMTP configuration
    name?: string;
    // SMTP server host address
    host?: string;
    // SMTP server port number
    port?: number;
    // Username for SMTP authentication
    username?: string;
    // Password for SMTP authentication
    password?: string;
    // Whether to use secure connection (SSL/TLS)
    secure?: boolean;
    // Daily quota for sending emails
    dailyQuota?: number;
    // Timezone for calculating daily quota
    dailyQuotaTimezone?: string;
    // Maximum speed (emails per second) for sending
    maxSpeed?: number;
    // Whether the SMTP configuration is activated
    isActivated?: boolean;
  }
  // Request to create a new SMTP configuration
  export interface CreateSmtpConfigRequest {
    // Name of the SMTP configuration
    name?: string;
    // SMTP server host address
    host?: string;
    // SMTP server port number
    port?: number;
    // Username for SMTP authentication
    username?: string;
    // Password for SMTP authentication
    password?: string;
    // Whether to use secure connection (SSL/TLS)
    secure?: boolean;
    // Daily quota for sending emails
    dailyQuota?: number;
    // Timezone for calculating daily quota
    dailyQuotaTimezone?: string;
    // Maximum speed (emails per second) for sending
    maxSpeed?: number;
    // Whether the SMTP configuration is activated
    isActivated?: boolean;
  }
  // Response with the created SMTP configuration
  export interface CreateSmtpConfigResponse {
    // The newly created SMTP configuration
    config?: transactional_mailer_config.SmtpConfig;
  }
  // Request to get detailed information of an SMTP configuration by id
  export interface GetSmtpConfigRequest {
    // Unique identifier of the SMTP config to retrieve
    id?: string;
  }
  // Response with the detailed SMTP configuration
  export interface GetSmtpConfigResponse {
    // Detailed SMTP configuration information
    config?: transactional_mailer_config.SmtpConfig;
  }
  // Request to update existing SMTP configurations
  export interface UpdateSmtpConfigRequest {
    // List of SMTP config ids to update
    ids?: string[];
    // Updated SMTP server host address
    host?: string;
    // Updated SMTP server port number
    port?: number;
    // Updated username for SMTP authentication
    username?: string;
    // Updated password for SMTP authentication
    password?: string;
    // Whether to use secure connection (SSL/TLS)
    secure?: boolean;
    // Updated daily quota for sending emails
    dailyQuota?: number;
    // Updated timezone for daily quota calculation
    dailyQuotaTimezone?: string;
    // Updated maximum speed for sending emails
    maxSpeed?: number;
    // Whether the SMTP configuration is activated
    isActivated?: boolean;
  }
  // Response with the updated SMTP configuration
  export interface UpdateSmtpConfigResponse {
    // List of updated SMTP configurations
    configs?: transactional_mailer_config.SmtpConfig[];
  }
  // Request to delete SMTP configurations
  export interface DeleteSmtpConfigRequest {
    // List of SMTP config ids to delete
    ids?: string[];
  }
  // Response with a confirmation message for deletion
  export interface DeleteSmtpConfigResponse {
    // Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined.
    acknowledged?: boolean;
    // The number of documents that were deleted.
    deletedCount?: number;
  }
  // Response with a list of all SMTP configurations
  export interface ListSmtpConfigResponse {
    // List of all SMTP configurations
    configs?: transactional_mailer_config.SmtpConfig[];
  }
  // Request to verify an SMTP configuration by id
  export interface VerifySmtpConfigRequest {
    // Unique identifier of the SMTP config to verify
    id?: string;
  }
  // Response with the result of the verification (success or failure)
  export interface VerifySmtpConfigResponse {
    // Whether the SMTP config verification was successful
    success?: boolean;
    // Message providing details about the verification result
    message?: string;
  }
  // Request to send a test email using a specific SMTP configuration
  export interface SendTestEmailRequest {
    // Unique identifier of the SMTP config to use for sending
    id?: string;
    // Content of the test email
    content?: string;
    // Recipient email address for the test email
    toEmail?: string;
  }
  // Response with the result of the test email sending (success or failure)
  export interface SendTestEmailResponse {
    // Whether the test email was sent successfully
    success?: boolean;
    // Message providing details about the test email result
    message?: string;
  }
  // Request to mark an SMTP configuration as failed after an email sending error
  export interface GetNextAvailableSmtpConfigAfterErrorRequest {
    // Unique identifier of the failed SMTP config
    id?: string;
  }
  // Response with the next available SMTP configuration after marking a failed one
  export interface GetNextAvailableSmtpConfigAfterErrorResponse {
    // Updated SMTP configuration after marking an error
    config?: transactional_mailer_config.SmtpConfig;
  }
  // Response with the next available SMTP configuration
  export interface GetNextAvailableSmtpConfigResponse {
    // Next available SMTP configuration for use
    config?: transactional_mailer_config.SmtpConfig;
  }
  // tslint:disable-next-line:no-empty-interface
  export interface Empty {}
  // gRPC Service for managing SMTP configurations for transactional emails
  export interface TransactionalMailerConfigService {
    // Create a new SMTP configuration
    createSmtpConfig(
      data: CreateSmtpConfigRequest,
      metadata?: Metadata,
      ...rest: any[]
    ): Observable<CreateSmtpConfigResponse>;
    // Get detailed SMTP configuration by id
    getSmtpConfig(data: GetSmtpConfigRequest, metadata?: Metadata, ...rest: any[]): Observable<GetSmtpConfigResponse>;
    // Update existing SMTP configurations
    updateSmtpConfig(
      data: UpdateSmtpConfigRequest,
      metadata?: Metadata,
      ...rest: any[]
    ): Observable<UpdateSmtpConfigResponse>;
    // Delete SMTP configurations
    deleteSmtpConfig(
      data: DeleteSmtpConfigRequest,
      metadata?: Metadata,
      ...rest: any[]
    ): Observable<DeleteSmtpConfigResponse>;
    // List all SMTP configurations
    listSmtpConfig(data: Empty, metadata?: Metadata, ...rest: any[]): Observable<ListSmtpConfigResponse>;
    // Verify an SMTP configuration by id
    verifySmtpConfig(
      data: VerifySmtpConfigRequest,
      metadata?: Metadata,
      ...rest: any[]
    ): Observable<VerifySmtpConfigResponse>;
    // Send a test email using a specific SMTP configuration
    sendTestEmail(data: SendTestEmailRequest, metadata?: Metadata, ...rest: any[]): Observable<SendTestEmailResponse>;
    // Mark an SMTP configuration as failed and get the next available one
    getNextAvailableSmtpConfigAfterError(
      data: GetNextAvailableSmtpConfigAfterErrorRequest,
      metadata?: Metadata,
      ...rest: any[]
    ): Observable<GetNextAvailableSmtpConfigAfterErrorResponse>;
    // Get the next available SMTP configuration for use
    getNextAvailableSmtpConfig(
      data: Empty,
      metadata?: Metadata,
      ...rest: any[]
    ): Observable<GetNextAvailableSmtpConfigResponse>;
    // Ping the service to check if it is running
    health(data: Empty, metadata?: Metadata, ...rest: any[]): Observable<Empty>;
  }
}
